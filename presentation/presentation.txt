Peter Mounce
	Homepage: 
		http://neverrunwithscissors.com
		http://www.onalytica.com
		
rake-dotnet:
	source - http://github.com/petemounce/rake-dotnet
	"documentation" - http://blog.neverrunwithscissors.com/tag/rake-dotnet
	example teamcity - http://teamcity.codebetter.com -> IncludeCombiner


















































Why?
	* Who here has written a build script?
		* Who has needed to?
		* Who has wanted to?

		
		
		
		


		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	* Did you use msbuild or nant?
		* How many lines of XML was it?
		* How many times did you need to write a custom task?
		* How many times was it possible for a colleague to modify it without you helping?



		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	












	
		
	* I wrote first msbuild project 3 years ago
		* Painful to maintain
			* Never remembered the syntax for the collection types
			* Always had to re-learn how to use it
		* No-one else wanted to learn it to be able to change it
			* I'm the only one able to change it - and it hurts

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
What?
	* rake is "Ruby make"
	* make is a build tool; one deals with tasks, and files, and dependencies between the two
		* Example - compile a set of .o file from a .c file with a cc command
		* Example - create a zip file of the output for deployment
		* Example - find out whether a service is running, and if not; start it
		* Example - compile a .NET dll from a c# project file with an msbuild command
	* Ruby is a dynamic scripting language
		* When have you ever called a build script anything but a "script"?  XML/declarative-approach is the wrong abstraction to apply for a build script

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
How?
	* Install steps:
		* Install ruby - one-click installer to c:\ruby (might even work with IronRuby; haven't tried)
		* From a command-line:
			* gem update rake
			* (optional) gem install rake-dotnet
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	* Simplistic - wrap msbuild and call it to build the solution
		Example: how_1_msbuild/Rakefile.rb
		rake
			runs clean, then build
		rake clean
			runs clean
		rake clean build
			runs clean, then build
		rake clean build --trace
			ditto with more output
	































	
	* Supply some parameters from the command-line
		Example: how_2_parameters/Rakefile.rb
		rake CONFIGURATION=Release
			runs clean, then build, passing in 'Release' as a parameter









































			
	* Demo dependencies and clean/clobber
		Example: how_3_dependencies_and_clean/Rakefile.rb
		rake default clean --trace
			build then call clean; deletes the intermediate files but not the output files
		rake default clobber --trace
			build then call clobber; deletes the intermediate files AND the output files - idea is to bring us back to fresh-checkout state
		rake -v
		rake clean uber.end_result
			see that since foo.intermediate is new, dependencies are rebuilt
		del uber.end_result; rake uber.end_result
			see that only uber.end_result is run because dependencies are up-to-date









































			
	* Wrap other command line tools and call them
		Example: how_4_console_tool_wrap/Rakefile.rb
		rake 










































		
	* rule-based tasks
		Example: how_5_rules/Rakefile.rb
		rake
			builds default
		rake clean
		rake foo.a
			builds foo.a via *.a rule
		rake bar.a
			builds bar.a via *.a rule
		rake anything.b
			builds anything.b via regex rule









































			
	* Demo custom rake tasks
		Example: how_6_custom_tasks/Rakefile.rb
		rake -T
			observe, documentation for the tasks decorated with desc
		rake :foo
			foo task is run
		rake :bar
			bar task is run, with the non-default param pushed in by the block when initialised
		rake :baz
			baz task is run, with the non-default param pushed in by the attr_accessor after initialised
			point out that if you had a standardised build-script, would need to store the task in a constant so it's visible outside of the scope of the common file, if specific projects needed to set properties in this manner









































			
	* Make it by-conventional
		gem install rake-dotnet (need internet connection)
		Example: ../DemoRoot
		rake
			observe what happens out of the box; compare to length of rakefile vs msbuild project to do same
		Conventions:
			README.markdown -> conventions

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
Links:
	* msbuild-based featureful build-script  http://dotnet.org.za/cjlotz/archive/2007/04/04/part-1-continuous-integration-using-msbuild-cruisecontrol-net-fxcop-nunit-ncover-subversion.aspx
	* ruby - http://www.ruby-lang.org/
		* C# developer's guide to ruby - http://www.codethinked.com/post/2008/07/21/Learning-Ruby-via-IronRuby-and-C-Part-1.aspx
	* rake - http://rake.rubyforge.org/
	* rake-dotnet - http://github.com/petemounce/rake-dotnet + http://blog.neverrunwithscissors.com/tag/rake-dotnet
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
TeamCity (this is a simple setup that doesn't attempt to parallelise work among the agents in the build cloud)
	* Install TC
	* Install JetBrains git-plugin
	* New project
	* New config
		General settings:
			artifacts
				build/out/reports/**/*
				build/out/pkg/*.zip
		VCS settings:
		Runner settings:
			type: Rake
			path to rakefile: build/Rakefile.rb
			working directory: build
			tasks: clobber assembly_info compile harvest_output xunit harvest_webapps package
