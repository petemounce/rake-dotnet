<Project DefaultTargets="RunManualTests" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- TODO: Specify the full path to the NCover.MSBuildTasks.dll if not in your path -->
    <UsingTask TaskName="NCover.MSBuildTasks.NCover"
               AssemblyFile="NCover.MSBuildTasks.dll"/>


    <PropertyGroup>
        <NCoverPath>C:\Program Files\</NCoverPath>
        <MSTestPath>C:\Program Files (x86)\Microsoft Visual Studio 9.0\Common7\IDE\</MSTestPath>
        <NAntTestRunner>.\Tools\nunit-console.exe</NAntTestRunner>
        <TestDlls>.\bin\tests1.dll .\bin\tests2.dll .\bin\tests3.dll</TestDlls>
    </PropertyGroup>

    <!--
    Simple NCover setup to run NCover on an application which is then tested manually (or by an external program).
    This task could be used by someone in the QA department running manual tests, or if the UI test runner requires
    the program to be started before it (the UI test runner) is launched.
    -->
    <Target Name="RunManualTests">
        <!-- Assumes that the program will be exercised manually, or has some default path of execution -->
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="protoype.exe"
                TestRunnerArgs="/clear /nologo"
                CoverageFile="coverage\10.2.2009.xml" />    
    </Target>

    <!--
    NCover setup for running NUnit tests. Recommend use of the /noshadow flag, as NCover can have trouble
    covering shadowcopied assemblies.
    -->
    <Target Name="RunNUnitTests">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                CoverageFile="coverage\nunit-tests-coverage.xml" />
    </Target>

    <!--
    NCover setup for running MSTest (VisualStudio) tests. For NCover v2.1 and above, recommend use of
    CoverChildProcess="VSTestHost.exe" option, as it provides the greatest compatability with MSTest tests.
    If the CoverChildProcess option is not used, then "/noisolation" should be added to the TestRunnerArgs
    option. However, if "/noisolation" is used, any test using the "DeploymentItem" attribute will break.
    -->
    <Target Name="RunMSTestTests">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(MSTestPath)mstest.exe"
                TestRunnerArgs="/testcontainer:Debug\unittests.dll"
                CoverChildProcess="VSTestHost.exe" />
    </Target>

    <!--
    NCover setup for generating trend data from coverage information. Trend information is more compactly stored
    than coverage information, but does not store source file links. Trend data works hand-in-hand with coverage
    information to show coverage values over time.
    -->
    <Target Name="CreateTrendsAlongWithCoverage">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                AppendTrendTo=".\reports\project.trend" />
    </Target>

    <!--
    Using the BuildId option, coverage data and trend data can can be associated with a particular build number.
    -->
    <Target Name="AssociateTrendInstancesWithBuildID">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                AppendTrendTo=".\reports\project.trend"
                BuildId="10.2.3.103917"/>
    </Target>

    <!--
    By default, NCover reports on all coverage types (permitted by the license). If you're not interested in
    all of the coverage types, you can restrict the types reported on using the "CoverageType" option.
    -->
    <Target Name="SpecifyDesiredCoverageTypes">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                CoverageType="Symbol | CyclomaticComplexity" />
    </Target>

    <!--
    In lieu of using the reporting tool, NCover can generate an HTML report before it exits.
    -->
    <Target Name="CreateHtmlReportFromCoverage">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                HtmlReportDir=".\reports\" />
    </Target>

    <!--
    The "ProjectName" option changes the name of the project that appears on the HTML report.
    -->
    <Target Name="SetProjectNameOnHtmlReport">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                ProjectName="NHibernate v3.0"
                HtmlReportDir=".\reports\v3\" />
        
    </Target>

    <!--
    Log files are useful promarily when interacting with NCover support.
    -->
    <Target Name="CreateALogFile">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                LogFile="coverage.log"
                LogLevel="Normal" />
    </Target>

    <!--
    Often, NCover support will ask for a verbose log file, even though NCover will crash when generating
    a verbose log on x64 machines.
    -->
    <Target Name="CreateAVerboseLogFile">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                LogFile="coverage.log"
                LogLevel="Verbose" />
    </Target>

    <!--
    Sample task for setting up coverage for a webservice or an ASP.NEt application. In both cases,
    the test runner would have to be launched externally.
    -->
    <Target Name="CoverAWebserviceOrAnASP.NETApp">
        <NCover ToolPath="$(NCoverPath)"
                ProfileIIS="true" />
    </Target>

    <!--
    Sample task for covering a Windows or WCF service exposed as a Windows service. Note that the
    test runner would have to be launched externally.
    -->
    <Target Name="CoverAWindowsService">
        <NCover ToolPath="$(NCoverPath)"
                ProfileService="MyInstalledServiceName" />
    </Target>

    <!--
    By default, NCover keeps covering a service (or IIS) until it is explicitly told to stop.
    The "ServiceTimeout" option tells NCover to stop covering the service (or IIS) and report
    coverage data after the specified number of seconds have elapsed.
    -->
    <Target Name="TellingNCoverToStopAServiceAfterACertainElapsedTime">
        <NCover ToolPath="$(NCoverPath)"
                ProfileService="MyInstalledServiceName"
                ServiceTimeout="540"/>
    </Target>

    <!--
    Far more useful for running automated tests, telling NCover to cover both an executable and a service (or IIS)
    forces it to run in a special mode. In this mode, NCover gathers coverage from the service (or IIS) and shuts
    the service (or IIS) down once the executable exits.
    -->
    <Target Name="StoppingAServiceAfterAnExeExits">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                ProfileService="MyInstalledServiceName" />
    </Target>

    <!--
    NCover affects application startup time far more than it affects run-time. By default, NCover
    waits one minute to recieve a "started" message from the application it covers. However,
    larger applications can take longer than a minute to startup with NCover attached.
    The "WaitForAppLoad" option tells NCover to wait the given number of minutes before deciding
    that the application is a no-show.
    -->
    <Target Name="CoveringAServiceThatHasALongStartupTime">
        <NCover ToolPath="$(NCoverPath)"
                ProfileService="MyInstalledServiceName"
                WaitForAppLoad="10" />
    </Target>

    <Target Name="UsingTypemockWithNCover">
        <!-- Trouble using Typemock with NCover should be directed to the Typemock team first -->
        <!-- <TypeMockStart ProfilerLaunchedFirst="true" /> -->
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow" />
        <!-- DO NOT USE the RegisterProfiler="true" option -->
        <!-- <TypeMockStop ProfilerLaunchedFirst="true" /> -->
    </Target>

    <Target Name="UsingSymbolsFromASymbolServer">
        <!--
        Need to set the "_NT_SYMBOL_PATH" environment variable for NCover to find the symbols correctly.
        If NCover is having trouble finding the symbol server, setting "_NT_SYMBOL_PATH" to the folder
        with PDB files and telling NCover to search for symbols on a symbolserver will usually solve the problem.
        -->
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                SymbolSearchLocations="SymbolServer"/>
    </Target>


    <!-- Exclusion / Inclusion options -->
    <!--
        Quick breakdown of what options are available
                    : Exclusion  : Inclusion
        ====================================
        Assembly    : yes        : yes
        Type        : yes        : yes
        Method      : yes        : NO
        Attribute   : yes        : yes
        Source File : yes        : yes
        
        By default, everything in every assembly loaded is included.
        Inclusions are always applied before exclusions (per type).
        
    -->
    <Target Name="GetCoverageOnTestAssemblies">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                IncludeAssemblies=".*tests;DAL\.tests.internal"/>
    </Target>

    <Target Name="GetCoverageOnNONTestAssemblies">
        <NCover ToolPath="$(NCoverPath)"
                TestRunnerExe="$(NAntTestRunner)"
                TestRunnerArgs="$(TestDlls) /noshadow"
                ExcludeAssemblies=".*vendorsupplied.*;.*tests"/>
    </Target>
    
</Project>